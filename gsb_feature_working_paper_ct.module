<?php
/**
 * @file
 * Code for the GSB Feature Working Paper Content Type feature.
 */

include_once 'gsb_feature_working_paper_ct.features.inc';

/**
 * Implements hook_gsb_feature_base_fields_faculty_author_types().
 */
function gsb_feature_working_paper_ct_gsb_feature_base_fields_faculty_author_types() {
  return array(
    'working_paper',
  );
}

/**
 * Sets up a callback function for handling the cmis import
 */
function gsb_feature_working_paper_ct_gsb_cmis_content_type_import_info() {
  return array(
    'working_paper' => array(
      'callback' => 'gsb_feature_working_paper_ct_cmis_import',
    ),
  );
}

/**
 * The callback function for handling the cmis import for
 * the Working Paper content type.
 */
function gsb_feature_working_paper_ct_cmis_import($doc, $uuid) {

  global $user;

  // Check if the Product Type has been set. If not, bail.
  if (empty($doc->properties['gsb:cwoProductType']) || trim($doc->properties['gsb:cwoProductType']) == '') {
    return;
  }

  // Valid Product Types for 'Working Paper' Content type is:
  //   Working Paper
  $product_type = $doc->properties['gsb:cwoProductType'];
  if ($product_type != 'Working Paper') {
    return;
  }

  // Attempt to find a node with the document uuid
  $query = new EntityFieldQuery();
  $query->fieldCondition('field_document_uuid', 'value', $uuid, '=')->range(0, 1);
  $entities = $query->execute();

  if (!empty($entities['node'])) {
    // a node already exists, so load it
    $nids = array_keys($entities['node']);
    $node = node_load(array_shift($nids));
  } else {
    // a node does exist, so create one
    $values = array(
      'type' => 'working_paper',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 1,
      'promote' => 0,
    );
    $node = entity_create('node', $values);
  }

  // if the node isn't a Working Paper, then bail
  if ($node->type != 'working_paper') {
    return;
  }

  gsb_cmis_log('uuid = '.$uuid, 'success');

  $ewrapper = entity_metadata_wrapper('node', $node);

  gsb_cmis_log('writing document uuid', 'success');

  $ewrapper->field_document_uuid->set($uuid);

  gsb_cmis_log('writing title', 'success');

  if (!empty($doc->properties['cm:title']) && trim($doc->properties['cm:title']) != '') {
    $ewrapper->title->set($doc->properties['cm:title']);
  } else {
    // if title is empty, then try to use document name
    if (!empty($doc->properties['cmis:contentStreamFileName']) && trim($doc->properties['cmis:contentStreamFileName']) != '') {
      $ewrapper->title->set($doc->properties['cmis:contentStreamFileName']);
    } else {
      $ewrapper->title->set('no title');
    }  
  }

  gsb_cmis_log('writing field_year', 'success');

  if (!empty($doc->properties['gsb:cwoPublicationYear']) && trim($doc->properties['gsb:cwoPublicationYear']) != '') {
    $year = $doc->properties['gsb:cwoPublicationYear'];
    gsb_cmis_log('year = '.$year, 'success');
    if (is_numeric($year)) {
      $date = new DateTime($year."-01-01");
      $ewrapper->field_year->set($date->getTimestamp());
    } else {
      $ewrapper->field_year = NULL;
    }
  } else {
    $ewrapper->field_year = NULL;
  }

  gsb_cmis_log('writing field_document_name', 'success');

  if (!empty($doc->properties['cmis:contentStreamFileName']) && trim($doc->properties['cmis:contentStreamFileName']) != '') {
    gsb_cmis_log('writing field_document_name = '.$doc->properties['cmis:contentStreamFileName'], 'success');
    $ewrapper->field_document_name->set($doc->properties['cmis:contentStreamFileName']);
  } else {
    $ewrapper->field_document_name->set(NULL);
  }  

  gsb_cmis_log('writing field_description', 'success');

  if (!empty($doc->properties['cm:description']) && trim($doc->properties['cm:description']) != '') {
    $ewrapper->field_description->set($doc->properties['cm:description']);
  } else {
    $ewrapper->field_description->set(NULL);
  }

  gsb_cmis_log('writing field_link_document', 'success');
  
  $url = gsb_cmis_api_getObjectURL('default', $doc);

  if (!empty($url) && trim($url) != '') {
    $ewrapper->field_link_document->url->set($url);
  } else {
    $ewrapper->field_link_document = array();
  }

  gsb_cmis_log('writing field_permissions_statement', 'success');

  if (!empty($doc->properties['gsb:permisiionStatement']) && trim($doc->properties['gsb:permisiionStatement']) != '') {
    $ewrapper->field_permissions_statement->set($doc->properties['gsb:permisiionStatement']);
  } else {
    $ewrapper->field_permissions_statement->set(NULL);
  }

  gsb_cmis_log('writing field_link_single', 'success');

  if (!empty($doc->properties['gsb:cwoLinkAtHarvard']) && trim($doc->properties['gsb:cwoLinkAtHarvard']) != '') {
    $ewrapper->field_link_single->url->set($doc->properties['gsb:cwoLinkAtHarvard']);
  } else {
    $ewrapper->field_link_single = array();
  }

  gsb_cmis_log('writing field_citation', 'success');

  if (!empty($doc->properties['gsb:cwoCitation']) && trim($doc->properties['gsb:cwoCitation']) != '') {
    $ewrapper->field_citation->set($doc->properties['gsb:cwoCitation']);
  } else {
    $ewrapper->field_citation->set(NULL);
  }

  gsb_cmis_log('writing field_learning_objective', 'success');

  if (!empty($doc->properties['gsb:cwoLearningObjective']) && trim($doc->properties['gsb:cwoLearningObjective']) != '') {
    $ewrapper->field_learning_objective->set($doc->properties['gsb:cwoLearningObjective']);
  } else {
    $ewrapper->field_learning_objective->set(NULL);
  }

  gsb_cmis_log('writing field_page_count', 'success');

  if (!empty($doc->properties['gsb:cwoLength']) && trim($doc->properties['gsb:cwoLength']) != '') {
    $ewrapper->field_page_count->set($doc->properties['gsb:cwoLength']);
  } else {
    $ewrapper->field_page_count->set(NULL);
  }

  gsb_cmis_log('writing field_product_type', 'success');

  $ewrapper->field_product_type->set($product_type);

  gsb_cmis_log('writing field_business_insight_topic', 'success');

  if (!empty($doc->properties['gsb:cwoBusinessTopics']) && trim($doc->properties['gsb:cwoBusinessTopics']) != '') {
    $ids = array();
    $bi_topic = $doc->properties['gsb:cwoBusinessTopics'];
    $results = taxonomy_get_term_by_name($bi_topic);
    foreach ($results as $item) {
      if ($item->vocabulary_machine_name == 'business_insight_topic') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_business_insight_topic->set($ids);
  } else {
    $ewrapper->field_business_insight_topic = array();
  }

  gsb_cmis_log('writing field_academic_area_unlimited', 'success');

  if (!empty($doc->properties['gsb:cwoAcademicArea']) && trim($doc->properties['gsb:cwoAcademicArea']) != '') {
    $ids = array();
    $academic_area = $doc->properties['gsb:cwoAcademicArea'];
    $results = taxonomy_get_term_by_name($academic_area);
    foreach ($results as $item) {
      if ($item->vocabulary_machine_name == 'academic_area') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_academic_area_unlimited->set($ids);
  } else {
    $ewrapper->field_academic_area_unlimited = array();
  }

  gsb_cmis_log('writing field_authors', 'success');

  if (!empty($doc->properties['gsb:authorsSunetId']) && trim($doc->properties['gsb:authorsSunetId']) != '') {
    _gsb_feature_working_paper_ct_import_authors($node,$ewrapper,$doc);
  }

  gsb_cmis_log('writing field_paper_copy', 'success');

  if (!empty($doc->properties['gsb:cwoPaperCopy']) && trim($doc->properties['gsb:cwoPaperCopy']) != '') {
    $ewrapper->field_paper_copy->set($doc->properties['gsb:cwoPaperCopy']);
  } else {
    $ewrapper->field_paper_copy->set(NULL);
  }  
  
  gsb_cmis_log('writing field_item_id', 'success');

  if (!empty($doc->properties['gsb:cwoItemId']) && trim($doc->properties['gsb:cwoItemId']) != '') {
    $ewrapper->field_item_id->set($doc->properties['gsb:cwoItemId']);
  } else {
    $ewrapper->field_item_id->set(NULL);
  }  
  
  gsb_cmis_log('writing field_tag', 'success');

  $tags = _gsb_feature_working_paper_ct_getTags($uuid);

  if (!empty($tags)) {
    $ids = array();
    $term_list = array();
    _gsb_feature_working_paper_ct_add_tags($tags);
    foreach($tags as $term) {
      $results = taxonomy_get_term_by_name($term);
      $term_list = array_merge($term_list, $results);
    }
    foreach ($term_list as $item) {
      if ($item->vocabulary_machine_name == 'tag') {
        $ids[] = $item->tid;
      }
    }
    $ewrapper->field_tag->set($ids);
  } else {
    $ewrapper->field_tag = array();
  }

  gsb_cmis_log('saving node', 'success');

  $ewrapper->save();
  
}

/**
 * Add the working papers tags from the returned Alfresco data 
 */
function _gsb_feature_working_paper_ct_add_tags($tags) {
  $vocab = taxonomy_vocabulary_machine_name_load('tag');
  $vid = $vocab->vid;
  foreach($tags as $term) {
    $results = taxonomy_get_term_by_name($term);
    if (empty($results)) {
      _gsb_feature_working_paper_ct_add_tag_term($term, $vid);
    } else {
      $found = FALSE; 
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'tag') {
          $found = TRUE;
          break;
        }    
      }
      if (!$found) {
        _gsb_feature_working_paper_ct_add_tag_term($term, $vid);
      }
    }
  }
}

/**
 * Add a tag term 
 */
function _gsb_feature_working_paper_ct_add_tag_term($term, $vid) {
  $new_term = new stdClass();
  $new_term->name = $term;
  $new_term->description = '';
  $new_term->vid = $vid;
  $new_term->parent = null;
  taxonomy_term_save($new_term);
}

/**
 * Get the list of tags from Alfresco
 */
function _gsb_feature_working_paper_ct_getTags($uuid) {

  $tags = array();

  $repo_info = variable_get('cmis_repositories', false);
  if (!$repo_info) {
    return $tags;
  }

  // get the id - striped down to just the number 

  $id = str_replace('urn:uuid:', '', $uuid);

  // put together the url for the alfresco service call - to get 'tags'

  $url = $repo_info['default']['service_url'];
  $url = $url . $id . '/tags';

  // get the user and password

  $user = $repo_info['default']['user'];
  $password = $repo_info['default']['password'];

  // setup the curl options

  $session = curl_init();

  curl_setopt($session, CURLOPT_URL, $url);
  curl_setopt($session, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($session, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($session, CURLOPT_COOKIEFILE, "");
  curl_setopt($session, CURLOPT_USERPWD, $user. ":" . $password);
  curl_setopt($session, CURLOPT_HTTPHEADER, array("Content-Type" => ""));
  curl_setopt($session, CURLOPT_CUSTOMREQUEST, "GET");

  // make the return value object

  $retval = new stdClass();
  $retval->url = $url;
  $retval->method = "GET";
  $retval->content_sent = null;
  $retval->content_type_sent = "";

  // make the curl call

  $retval->body = curl_exec($session);

  // set the return values

  $retval->code = curl_getinfo($session, CURLINFO_HTTP_CODE);
  $retval->content_type = curl_getinfo($session, CURLINFO_CONTENT_TYPE);
  $retval->content_length = curl_getinfo($session, CURLINFO_CONTENT_LENGTH_DOWNLOAD);

  // close the curl session

  curl_close($session);

  if ($retval->code == '200') {
    $tags = drupal_json_decode($retval->body);
  }

  return $tags;
}

/**
 * Set the list of tags to Alfresco
 */
function _gsb_feature_working_paper_ct_setTags($uuid, $tags) {

  $repo_info = variable_get('cmis_repositories', false);
  if (!$repo_info) {
    return false;
  }

  // get the id - striped down to just the number 

  $id = str_replace('urn:uuid:', '', $uuid);

  // put together the url for the alfresco service call - to get 'tags'

  $url = $repo_info['default']['service_url'];
  $url = $url . $id . '/tags';

  // get the user and password

  $user = $repo_info['default']['user'];
  $password = $repo_info['default']['password'];

  // setup the curl options

  $session = curl_init();

  curl_setopt($session, CURLOPT_URL, $url);
  curl_setopt($session, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($session, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($session, CURLOPT_COOKIEFILE, "");
  curl_setopt($session, CURLOPT_USERPWD, $user. ":" . $password);
  curl_setopt($session, CURLOPT_CUSTOMREQUEST, "POST");

  // pass the tags as data in the header
  $data_string = json_encode($tags);     
                                                                                                                                      
  curl_setopt($session, CURLOPT_POSTFIELDS, $data_string);                                        
  curl_setopt($session, CURLOPT_HTTPHEADER, array(                    
    'Content-Type: application/json',
    'Content-Length: ' . strlen($data_string),
  ));
  
  // make the return value object

  $retval = new stdClass();
  $retval->url = $url;
  $retval->method = "POST";
  $retval->content_sent = null;
  $retval->content_type_sent = "";

  // make the curl call

  $retval->body = curl_exec($session);

  // set the return values

  $retval->code = curl_getinfo($session, CURLINFO_HTTP_CODE);
  $retval->content_type = curl_getinfo($session, CURLINFO_CONTENT_TYPE);
  $retval->content_length = curl_getinfo($session, CURLINFO_CONTENT_LENGTH_DOWNLOAD);

  // close the curl session

  curl_close($session);

  if ($retval->code == '200') {
    $result = drupal_json_decode($retval->body);
  }

  return $result;
  
}

/**
 * Get authors from the Alfresco doc properties
 */
function _gsb_feature_working_paper_ct_import_authors($node,$ewrapper,$doc) {

  // get the list of sunetids from Alfresco's returned data
  $sunet_ids = array_map('trim', explode(',', $doc->properties['gsb:authorsSunetId']));

  // lookup the node ids related to these ids
  $query = db_select('field_data_field_sunetid', 'su');
  $query->fields('su', array('bundle', 'entity_id', 'field_sunetid_value'));
  $query->condition('su.field_sunetid_value',$sunet_ids,'IN');
  $result = $query->execute();

  // keep these node ids in a list
  $entity_ids = array();
  foreach ($result as $record) {
    $entity_ids[$record->entity_id] = $record->entity_id;
  }

  // get the current list of authors saved with the node
  $authors = $ewrapper->field_authors->value();

  // if any of the author ids match one of the sunetid node ids, then
  // we don't need to add it, and can remove it from our list
  foreach($authors as $author) {
    $ewrap_author = entity_metadata_wrapper('field_collection_item', $author);
    $ref = $ewrap_author->field_person_fac_single_ref->value();
    if ($ref) {
      $author_nid = $ref->nid;
      if (!empty($entity_ids[$author_nid])) {
        unset($entity_ids[$author_nid]);
      }
    }
  }

  // check for an 'default/empty' author field collection
  // remove if this is the case, and we have authors to add
  $found_default = FALSE;
  if (count($authors) == 1) {
    if (empty($authors[0]->field_first_name)) {
      if (empty($authors[0]->field_last_name)) {
        if (empty($authors[0]->field_person_fac_single_ref)) {
          $found_default = TRUE;
        }
      }
    }
  }
  if ($found_default && count($entity_ids) > 0) {
    $ewrapper->field_authors->set(NULL);
  }

  // add any new authors that came for the sunetids
  foreach ($entity_ids as $entity_id) {
    _gsb_feature_working_paper_ct_add_author($node, $entity_id);
  }  

}  

/**
 * Add an author entity ref (via field_authors field collection) 
 * to the node's current list
 */
function _gsb_feature_working_paper_ct_add_author($node, $entity_id) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_authors'));
  $field_collection_item->setHostEntity('node', $node);

  $field_collection_item->field_person_fac_single_ref = array(
    'und' => array(array('target_id' => $entity_id)),
  );

  $field_collection_item->field_person_fac_or_other = array(
    'und' => array(array('value' => 'UseEntityReference')),
  );

  $field_collection_item->field_first_name = array();
  $field_collection_item->field_last_name = array();

  $field_collection_item->save();

}

/**
 * Debugging function to get an Alfresco Object.
 */
function _gsb_feature_working_paper_ct_getObject($uuid) {
  module_load_include('api.inc', 'cmis');
  
  $repository = cmis_get_repository('default');
  dpm($repository);  

  $object = gsb_cmis_api_getDocumentObject('default', $uuid);

  $properties = cmisapi_getProperties($repository->repositoryId, $object->id);
  dpm($properties);

}  

/**
 * Implements hook_node_presave().
 */
function gsb_feature_working_paper_ct_node_presave($node) {
  // Update Alfresco with node properties
  if ($node->type == 'working_paper') {
    _gsb_feature_working_paper_ct_updateAlfresco($node);
  }
}

/**
 * Update Alfresco with the new properties for the Working Paper node.
 */
function _gsb_feature_working_paper_ct_updateAlfresco($node) {
  module_load_include('api.inc', 'cmis');

  $uuid = -1;
  if (!empty($node->field_document_uuid['und'][0])) {
    $uuid = $node->field_document_uuid['und'][0]['value'];
  }

  $repository = cmis_get_repository('default');

  $fid = $node->field_file_single_public['und'][0]['fid'];
  // @todo - Remove test folder 
  //$folderpath = '/Research Papers';  
  $folderpath = '/Research Papers/Greg';

  $file = (array)file_load($fid);   
  $filename = $file['filename'];

  $folder = cmisapi_getObjectByPath($repository->repositoryId, drupal_encode_path($folderpath) );

  if ($uuid == -1) {
    $cmis_object = cmisapi_createDocument(
      $repository->repositoryId,
      $folder->id,
      $filename,
      array(),
      @file_get_contents($file['uri']),
      $file['filemime']
    );    
  } else {
    $cmis_object = gsb_cmis_api_getDocumentObject('default', $uuid);
  }

  // get the properties for the object from Alfresco

  $properties = cmisapi_getProperties($repository->repositoryId, $cmis_object->id);

  // set the node properties to match the values held by Alfresco

  $node->field_document_uuid['und'][0]['value'] = $properties->uuid;

  // set the alfresco properties via post to a WebScript

  _gsb_feature_working_paper_ct_setProperties($properties->uuid,$node);

}

/**
 * Set the properties to Alfresco
 */
function _gsb_feature_working_paper_ct_setProperties($uuid,$node) {

  $repo_info = variable_get('cmis_repositories', false);
  if (!$repo_info) {
    return false;
  }

  // get the data properties from the node

  $title = $node->title;
  $cwoProductType = 'Working Paper';

  $publication_year = '';
  if (!empty($node->field_year_of_publication['und'][0])) {
    $publication_year = $node->field_year_of_publication['und'][0]['value'];
    $publication_year = substr($publication_year, 0, 4);    
  }

  $description = '';
  if (!empty($node->field_description['und'][0])) {
    $description = $node->field_description['und'][0]['value'];  
  }  

  // @todo: need to check into what we need to do with itemid
  //$cwoItemId = $node->field_item_id['und'][0]['value'];
  $cwoItemId = '';
  
  $cwoAcademicArea = '';
  if (!empty($node->field_academic_area_unlimited['und'][0])) {
    $academic_area_tid = $node->field_academic_area_unlimited['und'][0]['tid'];
    $academic_area_term = taxonomy_term_load($academic_area_tid); 
    $cwoAcademicArea = $academic_area_term->name;
  }

  $cwoBusinessTopics = '';
  if (!empty($node->field_business_insight_topic['und'][0])) {
    $bi_topic_tid = $node->field_business_insight_topic['und'][0]['tid'];
    $bi_topic_term = taxonomy_term_load($bi_topic_tid);
    $cwoBusinessTopics = $bi_topic_term->name;
  }

  $authorSunetIds = array();
  $authors = array();
  if (!empty($node->field_authors['und'][0])) {
    list($authorSunetIds, $authors) = _gsb_feature_working_paper_ct_getAuthorProperties($node);
  }  

  // get the id - striped down to just the number 

  $id = str_replace('urn:uuid:', '', $uuid);

  // put together the url for the alfresco service call - to get 'tags'

  $url = $repo_info['default']['service_url'];
  $url = str_replace('api/node/workspace/SpacesStore/','gsb/updateworkingpaper',$url);

  // get the user and password

  $user = $repo_info['default']['user'];
  $password = $repo_info['default']['password'];

  // setup the curl options

  $session = curl_init();

  curl_setopt($session, CURLOPT_URL, $url);
  curl_setopt($session, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($session, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($session, CURLOPT_COOKIEFILE, "");
  curl_setopt($session, CURLOPT_USERPWD, $user. ":" . $password);
  curl_setopt($session, CURLOPT_CUSTOMREQUEST, "POST");

  // pass the properties as data in the header

  $data = array(
    'uuid' => $id,    
    'title' => $title,
    'description' => $description,    
    'cwoPublicationYear' => $publication_year,
    'cwoAcademicArea' => $cwoAcademicArea,
    'cwoBusinessTopics' => $cwoBusinessTopics,
    'cwoItemId' => $cwoItemId,
    'cwoProductType' => $cwoProductType,
    'authorsSunetId' => implode(', ', $authorSunetIds),
    'author' => implode(', ', $authors), 
  );

  // encode the data

  $encoded = '';
  foreach($data as $name => $value){
    $encoded .= urlencode($name).'='.urlencode($value).'&';
  }

  // chop off the last ampersand
  
  $encoded = substr($encoded, 0, strlen($encoded)-1);
  
  // set the postfields

  curl_setopt($session, CURLOPT_POSTFIELDS,  $encoded);

  // set the http header

  curl_setopt($session, CURLOPT_HTTPHEADER, array(                    
    'Content-Length: ' . strlen($encoded),
  ));
  
  // make the return value object

  $retval = new stdClass();
  $retval->url = $url;
  $retval->method = "POST";
  $retval->content_sent = null;
  $retval->content_type_sent = "";

  // make the curl call

  $retval->body = curl_exec($session);

  // set the return values

  $retval->code = curl_getinfo($session, CURLINFO_HTTP_CODE);
  $retval->content_type = curl_getinfo($session, CURLINFO_CONTENT_TYPE);
  $retval->content_length = curl_getinfo($session, CURLINFO_CONTENT_LENGTH_DOWNLOAD);

  // close the curl session

  curl_close($session);

  $result = '';
  if ($retval->code == '200') {
    $result = drupal_json_decode($retval->body);
  }

  return $result;
  
}

function _gsb_feature_working_paper_ct_getAuthorProperties($node) {

  $authorSunetIds = array();
  $authors = array();

  if (empty($node->field_authors['und'][0])) {
    return array($authorSunetIds, $authors);
  }  

  foreach($node->field_authors['und'] as $author_item) {

    $authors_nid = $author_item['value'];

    $ewrap_author = entity_metadata_wrapper('field_collection_item', $authors_nid);
    $ref = $ewrap_author->field_person_fac_single_ref->value();

    if ($ref) {
      $authors_nid = $ref->nid;
      $author_node = node_load($authors_nid);
      $authorSunetIds[] = $author_node->field_sunetid['und'][0]['value'];  
    } else {
      $first_name = $ewrap_author->field_first_name->value();
      $last_name = $ewrap_author->field_last_name->value();
      $authors[] = $first_name . ' ' . $last_name;
    } 

  }

  return array($authorSunetIds, $authors);

}
